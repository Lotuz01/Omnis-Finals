/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/backup/route";
exports.ids = ["app/api/backup/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fbackup%2Froute&page=%2Fapi%2Fbackup%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fbackup%2Froute.ts&appDir=C%3A%5CUsers%5CLotuz%5CDesktop%5CNova%20pasta%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CLotuz%5CDesktop%5CNova%20pasta&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":
/*!*****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fbackup%2Froute&page=%2Fapi%2Fbackup%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fbackup%2Froute.ts&appDir=C%3A%5CUsers%5CLotuz%5CDesktop%5CNova%20pasta%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CLotuz%5CDesktop%5CNova%20pasta&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var C_Users_Lotuz_Desktop_Nova_pasta_src_app_api_backup_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./src/app/api/backup/route.ts */ \"(rsc)/./src/app/api/backup/route.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/backup/route\",\n        pathname: \"/api/backup\",\n        filename: \"route\",\n        bundlePath: \"app/api/backup/route\"\n    },\n    distDir: \".next\" || 0,\n    projectDir:  false || '',\n    resolvedPagePath: \"C:\\\\Users\\\\Lotuz\\\\Desktop\\\\Nova pasta\\\\src\\\\app\\\\api\\\\backup\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_Lotuz_Desktop_Nova_pasta_src_app_api_backup_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/backup/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = \"false\";\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                dynamicIO: Boolean(nextConfig.experimental.dynamicIO),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan && !(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fbackup%2Froute&page=%2Fapi%2Fbackup%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fbackup%2Froute.ts&appDir=C%3A%5CUsers%5CLotuz%5CDesktop%5CNova%20pasta%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CLotuz%5CDesktop%5CNova%20pasta&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/backup/route.ts":
/*!*************************************!*\
  !*** ./src/app/api/backup/route.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DELETE: () => (/* binding */ DELETE),\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_headers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/headers */ \"(rsc)/./node_modules/next/dist/api/headers.js\");\n/* harmony import */ var _utils_database_pool__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../utils/database-pool */ \"(rsc)/./src/utils/database-pool.ts\");\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../utils/logger */ \"(rsc)/./src/utils/logger.ts\");\n\n\n\n\n\n\n// Verificar se o usuário é administrador\nasync function verifyAdmin(authToken) {\n    if (!authToken) {\n        return false;\n    }\n    // Extrair username do token (remover timestamp se presente)\n    const username = authToken.includes('_') ? authToken.split('_')[0] : authToken;\n    try {\n        const [users] = await _utils_database_pool__WEBPACK_IMPORTED_MODULE_4__.dbPool.execute('SELECT username, is_admin FROM users WHERE username = ?', [\n            username\n        ]);\n        if (users.length === 0) {\n            return false;\n        }\n        const user = users[0];\n        // Compatível com colunas BOOLEAN (true/false) e TINYINT(1) (0/1)\n        return Boolean(user.is_admin);\n    } catch (error) {\n        _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.error('Erro ao verificar admin', error);\n        return false;\n    }\n}\n// GET - Listar backups disponíveis\nasync function GET() {\n    const startTime = Date.now();\n    try {\n        const cookieStore = (0,next_headers__WEBPACK_IMPORTED_MODULE_3__.cookies)();\n        const authToken = cookieStore.get('auth_token')?.value;\n        if (!authToken) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.info('Tentativa de acesso não autorizado');\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                message: 'Unauthorized'\n            }, {\n                status: 401\n            });\n        }\n        const isAdmin = await verifyAdmin(authToken);\n        if (!isAdmin) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.info('Acesso negado - usuário não é admin', {\n                endpoint: '/api/backup'\n            });\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                message: 'Admin access required'\n            }, {\n                status: 403\n            });\n        }\n        const backupDir = path__WEBPACK_IMPORTED_MODULE_2___default().join(process.cwd(), 'src', 'backups');\n        try {\n            const files = await fs__WEBPACK_IMPORTED_MODULE_1__.promises.readdir(backupDir);\n            const backupFiles = files.filter((file)=>file.startsWith('backup_') && file.endsWith('.json'));\n            const backups = [];\n            // Processar arquivos em paralelo para melhor performance\n            const filePromises = backupFiles.map(async (file)=>{\n                try {\n                    const filePath = path__WEBPACK_IMPORTED_MODULE_2___default().join(backupDir, file);\n                    const stats = await fs__WEBPACK_IMPORTED_MODULE_1__.promises.stat(filePath);\n                    const sizeKB = (stats.size / 1024).toFixed(2);\n                    return {\n                        filename: file,\n                        size: `${sizeKB} KB`,\n                        sizeFormatted: formatBytes(stats.size),\n                        created: stats.mtime.toISOString(),\n                        path: filePath\n                    };\n                } catch (error) {\n                    _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.warn('Erro ao processar arquivo de backup', error);\n                    return null;\n                }\n            });\n            const results = await Promise.all(filePromises);\n            backups.push(...results.filter((backup)=>backup !== null));\n            // Ordenar por data de criação (mais recente primeiro)\n            backups.sort((a, b)=>new Date(b.created).getTime() - new Date(a.created).getTime());\n            _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.info('Backup list retrieved', {\n                count: backups.length,\n                duration: Date.now() - startTime\n            });\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                backups\n            });\n        } catch  {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                backups: []\n            });\n        }\n    } catch (error) {\n        _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.error('Error listing backups', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            message: 'Error listing backups',\n            error: error.message\n        }, {\n            status: 500\n        });\n    }\n}\n// Função auxiliar para formatar bytes\nfunction formatBytes(bytes) {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = [\n        'Bytes',\n        'KB',\n        'MB',\n        'GB'\n    ];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n// POST - Criar novo backup\nasync function POST(request) {\n    const startTime = Date.now();\n    try {\n        const cookieStore = (0,next_headers__WEBPACK_IMPORTED_MODULE_3__.cookies)();\n        const authToken = cookieStore.get('auth_token')?.value;\n        if (!authToken) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.info('Tentativa de criação de backup não autorizada', {\n                endpoint: '/api/backup'\n            });\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                message: 'Unauthorized'\n            }, {\n                status: 401\n            });\n        }\n        const isAdmin = await verifyAdmin(authToken);\n        if (!isAdmin) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.info('Tentativa de criação de backup por não-admin', {\n                endpoint: '/api/backup'\n            });\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                message: 'Admin access required'\n            }, {\n                status: 403\n            });\n        }\n        const { action, filename } = await request.json();\n        if (action === 'create') {\n            const backup = {\n                timestamp: new Date().toISOString(),\n                version: '1.0',\n                data: {},\n                metadata: {\n                    totalRecords: 0,\n                    tablesCount: 0\n                }\n            };\n            // Lista de tabelas permitidas para backup com ordem de dependência\n            const allowedTables = {\n                'users': 'SELECT * FROM users',\n                'products': 'SELECT * FROM products',\n                'movements': 'SELECT * FROM movements',\n                'accounts': 'SELECT * FROM accounts'\n            };\n            const tables = Object.keys(allowedTables);\n            let totalRecords = 0;\n            // Usar transação para garantir consistência dos dados\n            await (0,_utils_database_pool__WEBPACK_IMPORTED_MODULE_4__.withTransaction)(async (connection)=>{\n                for (const table of tables){\n                    try {\n                        // Usar query pré-definida para evitar SQL injection\n                        const query = allowedTables[table];\n                        const [rows] = await connection.execute(query);\n                        backup.data[table] = rows;\n                        totalRecords += rows.length;\n                        _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.debug(`Backup da tabela ${table} concluído`, {\n                            records: rows.length\n                        });\n                    } catch (error) {\n                        _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.warn(`Erro ao fazer backup da tabela ${table}`, error);\n                        backup.data[table] = [];\n                    }\n                }\n            });\n            backup.metadata.totalRecords = totalRecords;\n            backup.metadata.tablesCount = Object.keys(backup.data).length;\n            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n            const backupDir = path__WEBPACK_IMPORTED_MODULE_2___default().join(process.cwd(), 'src', 'backups');\n            const backupFile = path__WEBPACK_IMPORTED_MODULE_2___default().join(backupDir, `backup_${timestamp}.json`);\n            // Criar diretório se não existir\n            try {\n                await fs__WEBPACK_IMPORTED_MODULE_1__.promises.mkdir(backupDir, {\n                    recursive: true\n                });\n                _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.info('Diretório de backup criado', {\n                    path: backupDir\n                });\n            } catch  {\n            // Diretório já existe\n            }\n            // Escrever backup de forma assíncrona e otimizada\n            const backupData = JSON.stringify(backup, null, 2);\n            await fs__WEBPACK_IMPORTED_MODULE_1__.promises.writeFile(backupFile, backupData, {\n                encoding: 'utf8'\n            });\n            const stats = await fs__WEBPACK_IMPORTED_MODULE_1__.promises.stat(backupFile);\n            const sizeKB = (stats.size / 1024).toFixed(2);\n            _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.info('Backup created successfully', {\n                action: 'create',\n                filename: path__WEBPACK_IMPORTED_MODULE_2___default().basename(backupFile),\n                size: stats.size,\n                totalRecords,\n                tablesCount: backup.metadata.tablesCount,\n                duration: Date.now() - startTime\n            });\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                message: 'Backup created successfully',\n                filename: path__WEBPACK_IMPORTED_MODULE_2___default().basename(backupFile),\n                size: `${sizeKB} KB`,\n                sizeFormatted: formatBytes(stats.size),\n                timestamp: backup.timestamp,\n                totalRecords,\n                tablesCount: backup.metadata.tablesCount,\n                tables: Object.keys(backup.data).map((table)=>({\n                        name: table,\n                        records: Array.isArray(backup.data[table]) ? backup.data[table].length : 0\n                    }))\n            });\n        } else if (action === 'restore' && filename) {\n            // Restaurar backup\n            const backupDir = path__WEBPACK_IMPORTED_MODULE_2___default().join(process.cwd(), 'src', 'backups');\n            const backupFilePath = path__WEBPACK_IMPORTED_MODULE_2___default().join(backupDir, filename);\n            // Verificar se arquivo existe\n            try {\n                await fs__WEBPACK_IMPORTED_MODULE_1__.promises.access(backupFilePath);\n            } catch  {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    message: 'Backup file not found'\n                }, {\n                    status: 404\n                });\n            }\n            // Ler e restaurar backup\n            const backupContent = await fs__WEBPACK_IMPORTED_MODULE_1__.promises.readFile(backupFilePath, 'utf8');\n            const backup = JSON.parse(backupContent);\n            let restoredRecords = 0;\n            await (0,_utils_database_pool__WEBPACK_IMPORTED_MODULE_4__.withTransaction)(async (connection)=>{\n                // Desabilitar verificações de chave estrangeira\n                await connection.execute('SET FOREIGN_KEY_CHECKS = 0');\n                const restoredTables = [];\n                // Restaurar cada tabela\n                for (const [tableName, tableData] of Object.entries(backup.data)){\n                    // Limpar tabela atual\n                    await connection.execute(`DELETE FROM ${tableName}`);\n                    if (tableData.length > 0) {\n                        // Obter colunas da primeira linha\n                        const columns = Object.keys(tableData[0]);\n                        const placeholders = columns.map(()=>'?').join(', ');\n                        const columnNames = columns.join(', ');\n                        const insertQuery = `INSERT INTO ${tableName} (${columnNames}) VALUES (${placeholders})`;\n                        // Inserir dados\n                        for (const row of tableData){\n                            const values = columns.map((col)=>row[col]);\n                            await connection.execute(insertQuery, values);\n                        }\n                    }\n                    restoredRecords += tableData.length;\n                    restoredTables.push({\n                        name: tableName,\n                        records: tableData.length\n                    });\n                    _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.debug(`Tabela ${tableName} restaurada`, {\n                        records: tableData.length\n                    });\n                }\n                // Reabilitar verificações de chave estrangeira\n                await connection.execute('SET FOREIGN_KEY_CHECKS = 1');\n            });\n            _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.info('Backup restored successfully', {\n                action: 'restore',\n                filename,\n                restoredRecords,\n                duration: Date.now() - startTime\n            });\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                message: 'Backup restored successfully',\n                backupDate: backup.timestamp,\n                restoredRecords\n            });\n        } else {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                message: 'Invalid action'\n            }, {\n                status: 400\n            });\n        }\n    } catch (error) {\n        _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.error('Error in backup operation', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            message: 'Error in backup operation',\n            error: error.message\n        }, {\n            status: 500\n        });\n    }\n}\n// DELETE - Deletar backup\nasync function DELETE(request) {\n    try {\n        const cookieStore = (0,next_headers__WEBPACK_IMPORTED_MODULE_3__.cookies)();\n        const authToken = cookieStore.get('auth_token')?.value;\n        if (!authToken) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                message: 'Unauthorized'\n            }, {\n                status: 401\n            });\n        }\n        const isAdmin = await verifyAdmin(authToken);\n        if (!isAdmin) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                message: 'Admin access required'\n            }, {\n                status: 403\n            });\n        }\n        const body = await request.text();\n        _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.debug('DELETE backup request body received', {\n            body\n        });\n        let filename = '';\n        try {\n            filename = JSON.parse(body).filename;\n        } catch (err) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.error('Error parsing JSON in DELETE backup', err);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                message: 'Erro ao processar JSON'\n            }, {\n                status: 400\n            });\n        }\n        if (!filename) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                message: 'Filename is required'\n            }, {\n                status: 400\n            });\n        }\n        _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.info('DELETE backup request', {\n            filename\n        });\n        const backupDir = path__WEBPACK_IMPORTED_MODULE_2___default().join(process.cwd(), 'src', 'backups');\n        const backupFilePath = path__WEBPACK_IMPORTED_MODULE_2___default().join(backupDir, filename);\n        // Verificar se arquivo existe\n        try {\n            await fs__WEBPACK_IMPORTED_MODULE_1__.promises.access(backupFilePath);\n        } catch  {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                message: 'Backup file not found'\n            }, {\n                status: 404\n            });\n        }\n        // Deletar arquivo\n        await fs__WEBPACK_IMPORTED_MODULE_1__.promises.unlink(backupFilePath);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            message: 'Backup deleted successfully'\n        });\n    } catch (error) {\n        _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.error('Error deleting backup', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            message: 'Error deleting backup',\n            error: error.message\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/backup/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/node_modules/mysql2/lib sync recursive ^cardinal.*$":
/*!********************************************************!*\
  !*** ./src/node_modules/mysql2/lib/ sync ^cardinal.*$ ***!
  \********************************************************/
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = "(rsc)/./src/node_modules/mysql2/lib sync recursive ^cardinal.*$";
module.exports = webpackEmptyContext;

/***/ }),

/***/ "(rsc)/./src/utils/database-pool.ts":
/*!************************************!*\
  !*** ./src/utils/database-pool.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   connectToDatabase: () => (/* binding */ connectToDatabase),\n/* harmony export */   dbPool: () => (/* binding */ dbPool),\n/* harmony export */   executeQuery: () => (/* binding */ executeQuery),\n/* harmony export */   withTransaction: () => (/* binding */ withTransaction)\n/* harmony export */ });\n/* harmony import */ var mysql2_promise__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mysql2/promise */ \"(rsc)/./src/node_modules/mysql2/promise.js\");\n/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./logger */ \"(rsc)/./src/utils/logger.ts\");\n// Sistema de pool de conexões otimizado para MySQL\n\n\nclass DatabasePool {\n    constructor(){\n        this.pool = null;\n        this.isInitialized = false;\n        console.error('🚨🚨🚨 [POOL-CONFIG] INICIALIZANDO POOL DE CONEXÕES 🚨🚨🚨');\n        console.error('🔧 [POOL-CONFIG] DB_HOST:', process.env.DB_HOST);\n        console.error('🔧 [POOL-CONFIG] DB_PORT:', process.env.DB_PORT);\n        console.error('🔧 [POOL-CONFIG] DB_USER:', process.env.DB_USER);\n        console.error('🔧 [POOL-CONFIG] DB_NAME:', process.env.DB_NAME);\n        console.error('🔧 [POOL-CONFIG] DB_PASSWORD definido:', !!process.env.DB_PASSWORD);\n        // Forçar o uso das variáveis de ambiente corretas\n        const dbHost = process.env.DB_HOST;\n        const dbPort = process.env.DB_PORT;\n        const dbUser = process.env.DB_USER;\n        const dbPassword = process.env.DB_PASSWORD;\n        const dbName = process.env.DB_NAME;\n        console.error('🔧 [POOL-CONFIG] Valores antes da configuração:');\n        console.error('🔧 [POOL-CONFIG] Host final:', dbHost);\n        console.error('🔧 [POOL-CONFIG] Port final:', dbPort);\n        console.error('🔧 [POOL-CONFIG] User final:', dbUser);\n        if (!dbHost || !dbPort || !dbUser || !dbPassword || !dbName) {\n            console.error('❌ [POOL-CONFIG] ERRO: Variáveis de ambiente obrigatórias não definidas!');\n            console.error('❌ [POOL-CONFIG] DB_HOST:', dbHost);\n            console.error('❌ [POOL-CONFIG] DB_PORT:', dbPort);\n            console.error('❌ [POOL-CONFIG] DB_USER:', dbUser);\n            console.error('❌ [POOL-CONFIG] DB_PASSWORD definido:', !!dbPassword);\n            console.error('❌ [POOL-CONFIG] DB_NAME:', dbName);\n            throw new Error('Variáveis de ambiente do banco de dados não estão definidas corretamente');\n        }\n        this.config = {\n            host: dbHost,\n            port: parseInt(dbPort),\n            user: dbUser,\n            password: dbPassword,\n            database: dbName,\n            connectionLimit: parseInt(process.env.DB_CONNECTION_LIMIT || '10'),\n            acquireTimeout: parseInt(process.env.DB_ACQUIRE_TIMEOUT || '60000'),\n            timeout: parseInt(process.env.DB_TIMEOUT || '60000'),\n            reconnect: true,\n            idleTimeout: parseInt(process.env.DB_IDLE_TIMEOUT || '300000'),\n            queueLimit: parseInt(process.env.DB_QUEUE_LIMIT || '0') // 0 = sem limite\n        };\n        console.error('🔧 [POOL-CONFIG] Configuração final do pool:', {\n            host: this.config.host,\n            port: this.config.port,\n            user: this.config.user,\n            database: this.config.database\n        });\n        console.error('🚨🚨🚨 [POOL-CONFIG] FIM DA CONFIGURAÇÃO 🚨🚨🚨');\n    }\n    static getInstance() {\n        if (!DatabasePool.instance) {\n            DatabasePool.instance = new DatabasePool();\n        }\n        return DatabasePool.instance;\n    }\n    async initialize() {\n        if (this.isInitialized && this.pool) {\n            return;\n        }\n        try {\n            this.pool = mysql2_promise__WEBPACK_IMPORTED_MODULE_0__.createPool({\n                host: this.config.host,\n                port: this.config.port,\n                user: this.config.user,\n                password: this.config.password,\n                database: this.config.database,\n                connectionLimit: this.config.connectionLimit,\n                queueLimit: this.config.queueLimit,\n                // Configurações adicionais para otimização\n                charset: 'utf8mb4',\n                timezone: 'local',\n                supportBigNumbers: true,\n                bigNumberStrings: true,\n                dateStrings: false,\n                multipleStatements: false,\n                // Pool event handlers\n                typeCast: function(field, next) {\n                    const fieldObj = field;\n                    if (fieldObj.type === 'TINY' && fieldObj.length === 1) {\n                        return fieldObj.string() === '1'; // Convert TINYINT(1) to boolean\n                    }\n                    return next();\n                }\n            });\n            // Event listeners para monitoramento\n            this.pool.on('connection', (connection)=>{\n                _logger__WEBPACK_IMPORTED_MODULE_1__.logger.debug('Nova conexão estabelecida', {\n                    connectionId: connection.threadId\n                });\n            });\n            // Remover event listener 'error' pois não é suportado pelo tipo Pool\n            this.pool.on('release', (connection)=>{\n                _logger__WEBPACK_IMPORTED_MODULE_1__.logger.debug('Conexão liberada', {\n                    connectionId: connection.threadId\n                });\n            });\n            // Testar conexão inicial\n            await this.testConnection();\n            this.isInitialized = true;\n            _logger__WEBPACK_IMPORTED_MODULE_1__.logger.info('Pool de conexões inicializado com sucesso', {\n                host: this.config.host,\n                database: this.config.database,\n                connectionLimit: this.config.connectionLimit\n            });\n        } catch (error) {\n            _logger__WEBPACK_IMPORTED_MODULE_1__.logger.error('Erro ao inicializar pool de conexões', error);\n            throw error;\n        }\n    }\n    async testConnection() {\n        if (!this.pool) {\n            throw new Error('Pool não inicializado');\n        }\n        const connection = await this.pool.getConnection();\n        try {\n            await connection.ping();\n            _logger__WEBPACK_IMPORTED_MODULE_1__.logger.info('Teste de conexão bem-sucedido');\n        } finally{\n            connection.release();\n        }\n    }\n    handleDisconnect() {\n        _logger__WEBPACK_IMPORTED_MODULE_1__.logger.warn('Conexão perdida, tentando reconectar...');\n        setTimeout(async ()=>{\n            try {\n                await this.initialize();\n                _logger__WEBPACK_IMPORTED_MODULE_1__.logger.info('Reconexão bem-sucedida');\n            } catch (error) {\n                _logger__WEBPACK_IMPORTED_MODULE_1__.logger.error('Falha na reconexão', error);\n                this.handleDisconnect(); // Tentar novamente\n            }\n        }, 2000);\n    }\n    async getConnection() {\n        if (!this.isInitialized || !this.pool) {\n            await this.initialize();\n        }\n        if (!this.pool) {\n            throw new Error('Pool de conexões não disponível');\n        }\n        const startTime = Date.now();\n        try {\n            const connection = await this.pool.getConnection();\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_1__.logger.debug('Conexão obtida do pool', {\n                duration: `${duration}ms`,\n                connectionId: connection.threadId\n            });\n            return connection;\n        } catch (error) {\n            _logger__WEBPACK_IMPORTED_MODULE_1__.logger.error('Erro ao obter conexão do pool', error);\n            throw error;\n        }\n    }\n    async execute(query, params, options) {\n        const connection = await this.getConnection();\n        const startTime = Date.now();\n        try {\n            // Configurar timeout se especificado\n            if (options?.timeout) {\n                await connection.query('SET SESSION wait_timeout = ?', [\n                    Math.ceil(options.timeout / 1000)\n                ]);\n            }\n            const result = await connection.execute(query, params);\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_1__.logger.info('Database operation completed', {\n                operation: 'execute',\n                table: this.extractTableName(query),\n                duration\n            });\n            return result;\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_1__.logger.error('Database operation failed', {\n                operation: 'execute',\n                table: this.extractTableName(query),\n                duration,\n                error: error.message\n            });\n            throw error;\n        } finally{\n            connection.release();\n        }\n    }\n    async query(query, params) {\n        const connection = await this.getConnection();\n        const startTime = Date.now();\n        try {\n            const result = await connection.query(query, params);\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_1__.logger.info('Database query completed', {\n                operation: 'query',\n                table: this.extractTableName(query),\n                duration\n            });\n            return result;\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_1__.logger.error('Database query failed', {\n                operation: 'query',\n                table: this.extractTableName(query),\n                duration,\n                error: error.message\n            });\n            throw error;\n        } finally{\n            connection.release();\n        }\n    }\n    // Transação com rollback automático em caso de erro\n    async transaction(callback) {\n        const connection = await this.getConnection();\n        const startTime = Date.now();\n        try {\n            await connection.beginTransaction();\n            const result = await callback(connection);\n            await connection.commit();\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_1__.logger.info('Database transaction completed', {\n                operation: 'transaction',\n                table: 'multiple',\n                duration\n            });\n            return result;\n        } catch (error) {\n            await connection.rollback();\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_1__.logger.error('Database transaction failed', {\n                operation: 'transaction',\n                table: 'multiple',\n                duration,\n                error: error.message\n            });\n            throw error;\n        } finally{\n            connection.release();\n        }\n    }\n    // Extrair nome da tabela da query para logs\n    extractTableName(query) {\n        const match = query.match(/(?:FROM|INTO|UPDATE|JOIN)\\s+`?([a-zA-Z_][a-zA-Z0-9_]*)`?/i);\n        return match ? match[1] : 'unknown';\n    }\n    // Obter estatísticas do pool\n    getPoolStats() {\n        if (!this.pool) {\n            return null;\n        }\n        return {\n            connectionLimit: this.config.connectionLimit,\n            acquireTimeout: this.config.acquireTimeout\n        };\n    }\n    // Fechar pool graciosamente\n    async close() {\n        if (this.pool) {\n            _logger__WEBPACK_IMPORTED_MODULE_1__.logger.info('Fechando pool de conexões...');\n            await this.pool.end();\n            this.pool = null;\n            this.isInitialized = false;\n            _logger__WEBPACK_IMPORTED_MODULE_1__.logger.info('Pool de conexões fechado');\n        }\n    }\n    // Health check\n    async healthCheck() {\n        try {\n            const startTime = Date.now();\n            await this.testConnection();\n            const responseTime = Date.now() - startTime;\n            return {\n                status: 'healthy',\n                details: {\n                    responseTime: `${responseTime}ms`,\n                    poolStats: this.getPoolStats(),\n                    config: {\n                        host: this.config.host,\n                        database: this.config.database,\n                        connectionLimit: this.config.connectionLimit\n                    }\n                }\n            };\n        } catch (error) {\n            return {\n                status: 'unhealthy',\n                details: {\n                    error: error.message,\n                    poolStats: this.getPoolStats()\n                }\n            };\n        }\n    }\n}\n// Instância singleton\nconst dbPool = DatabasePool.getInstance();\n// Função de conveniência para manter compatibilidade\nasync function connectToDatabase() {\n    return await dbPool.getConnection();\n}\n// Função para executar queries com pool\nasync function executeQuery(query, params) {\n    return await dbPool.execute(query, params);\n}\n// Função para transações\nasync function withTransaction(callback) {\n    return await dbPool.transaction(callback);\n}\n// Inicializar pool na importação (apenas em ambiente servidor)\nif (true) {\n    dbPool.initialize().catch((error)=>{\n        _logger__WEBPACK_IMPORTED_MODULE_1__.logger.error('Falha ao inicializar pool de conexões na importação', error);\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/utils/database-pool.ts\n");

/***/ }),

/***/ "(rsc)/./src/utils/logger.ts":
/*!*****************************!*\
  !*** ./src/utils/logger.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LogLevel: () => (/* binding */ LogLevel),\n/* harmony export */   createRequestContext: () => (/* binding */ createRequestContext),\n/* harmony export */   logApiRequest: () => (/* binding */ logApiRequest),\n/* harmony export */   logger: () => (/* binding */ logger),\n/* harmony export */   useLogger: () => (/* binding */ useLogger),\n/* harmony export */   withApiLogging: () => (/* binding */ withApiLogging),\n/* harmony export */   withLogging: () => (/* binding */ withLogging)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n// Sistema de logging avançado para produção\n\n\n\nvar LogLevel = /*#__PURE__*/ function(LogLevel) {\n    LogLevel[LogLevel[\"ERROR\"] = 0] = \"ERROR\";\n    LogLevel[LogLevel[\"WARN\"] = 1] = \"WARN\";\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\n    LogLevel[LogLevel[\"DEBUG\"] = 3] = \"DEBUG\";\n    return LogLevel;\n}({});\nclass Logger {\n    constructor(config = {}){\n        this.currentFileSize = 0;\n        this.currentErrorFileSize = 0;\n        this.logs = [];\n        this.maxMemoryLogs = 1000;\n        this.config = {\n            level: this.parseLogLevel(process.env.LOG_LEVEL) || 2,\n            console: true,\n            file: process.env.LOG_FILE ? true : false,\n            filePath: process.env.LOG_FILE || './logs/app.log',\n            errorFilePath: process.env.LOG_ERROR_FILE || './logs/error.log',\n            maxFileSize: this.parseSize(process.env.LOG_MAX_SIZE) || 100 * 1024 * 1024,\n            maxFiles: parseInt(process.env.LOG_MAX_FILES || '10'),\n            format: 'json',\n            ...config\n        };\n        if (this.config.file && this.config.filePath) {\n            this.initFileLogging();\n        }\n    }\n    parseLogLevel(level) {\n        if (!level) return undefined;\n        switch(level.toLowerCase()){\n            case 'error':\n                return 0;\n            case 'warn':\n                return 1;\n            case 'info':\n                return 2;\n            case 'debug':\n                return 3;\n            default:\n                return undefined;\n        }\n    }\n    parseSize(size) {\n        if (!size) return undefined;\n        const match = size.match(/^(\\d+)(\\w+)?$/);\n        if (!match) return undefined;\n        const value = parseInt(match[1]);\n        const unit = (match[2] || '').toLowerCase();\n        switch(unit){\n            case 'kb':\n                return value * 1024;\n            case 'mb':\n                return value * 1024 * 1024;\n            case 'gb':\n                return value * 1024 * 1024 * 1024;\n            default:\n                return value;\n        }\n    }\n    initFileLogging() {\n        if (!this.config.filePath) return;\n        const logDir = path__WEBPACK_IMPORTED_MODULE_1___default().dirname(this.config.filePath);\n        const errorLogDir = path__WEBPACK_IMPORTED_MODULE_1___default().dirname(this.config.errorFilePath);\n        // Criar diretórios se não existirem\n        [\n            logDir,\n            errorLogDir\n        ].forEach((dir)=>{\n            if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(dir)) {\n                fs__WEBPACK_IMPORTED_MODULE_0___default().mkdirSync(dir, {\n                    recursive: true\n                });\n            }\n        });\n        // Inicializar streams\n        this.fileStream = (0,fs__WEBPACK_IMPORTED_MODULE_0__.createWriteStream)(this.config.filePath, {\n            flags: 'a'\n        });\n        this.errorFileStream = (0,fs__WEBPACK_IMPORTED_MODULE_0__.createWriteStream)(this.config.errorFilePath, {\n            flags: 'a'\n        });\n        // Verificar tamanhos atuais\n        if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(this.config.filePath)) {\n            this.currentFileSize = fs__WEBPACK_IMPORTED_MODULE_0___default().statSync(this.config.filePath).size;\n        }\n        if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(this.config.errorFilePath)) {\n            this.currentErrorFileSize = fs__WEBPACK_IMPORTED_MODULE_0___default().statSync(this.config.errorFilePath).size;\n        }\n    }\n    rotateLogFile(filePath, isError = false) {\n        const stream = isError ? this.errorFileStream : this.fileStream;\n        if (stream) {\n            stream.end();\n        }\n        const ext = path__WEBPACK_IMPORTED_MODULE_1___default().extname(filePath);\n        const base = path__WEBPACK_IMPORTED_MODULE_1___default().basename(filePath, ext);\n        const dir = path__WEBPACK_IMPORTED_MODULE_1___default().dirname(filePath);\n        // Rotacionar arquivos\n        for(let i = this.config.maxFiles - 1; i > 0; i--){\n            const oldFile = path__WEBPACK_IMPORTED_MODULE_1___default().join(dir, `${base}.${i}${ext}`);\n            const newFile = path__WEBPACK_IMPORTED_MODULE_1___default().join(dir, `${base}.${i + 1}${ext}`);\n            if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(oldFile)) {\n                if (i === this.config.maxFiles - 1) {\n                    fs__WEBPACK_IMPORTED_MODULE_0___default().unlinkSync(oldFile);\n                } else {\n                    fs__WEBPACK_IMPORTED_MODULE_0___default().renameSync(oldFile, newFile);\n                }\n            }\n        }\n        const rotatedFile = path__WEBPACK_IMPORTED_MODULE_1___default().join(dir, `${base}.1${ext}`);\n        if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(filePath)) {\n            fs__WEBPACK_IMPORTED_MODULE_0___default().renameSync(filePath, rotatedFile);\n        }\n        // Criar novo stream\n        const newStream = (0,fs__WEBPACK_IMPORTED_MODULE_0__.createWriteStream)(filePath, {\n            flags: 'a'\n        });\n        if (isError) {\n            this.errorFileStream = newStream;\n            this.currentErrorFileSize = 0;\n        } else {\n            this.fileStream = newStream;\n            this.currentFileSize = 0;\n        }\n    }\n    shouldLog(level) {\n        return level <= this.config.level;\n    }\n    formatMessage(level, message, data, stack, context) {\n        return {\n            timestamp: new Date().toISOString(),\n            level: LogLevel[level],\n            message,\n            ...data && {\n                data\n            },\n            ...stack && {\n                stack\n            },\n            ...context && context\n        };\n    }\n    addToMemory(entry) {\n        this.logs.push(entry);\n        if (this.logs.length > this.maxMemoryLogs) {\n            this.logs.shift();\n        }\n    }\n    writeToFile(entry) {\n        if (!this.config.file) return;\n        const logLine = this.config.format === 'json' ? JSON.stringify(entry) + '\\n' : `${entry.timestamp} [${entry.level}] ${entry.message}${entry.data ? ' ' + JSON.stringify(entry.data) : ''}\\n`;\n        const isError = entry.level === 'ERROR';\n        const stream = isError ? this.errorFileStream : this.fileStream;\n        const filePath = isError ? this.config.errorFilePath : this.config.filePath;\n        if (stream) {\n            stream.write(logLine);\n            const lineSize = Buffer.byteLength(logLine);\n            if (isError) {\n                this.currentErrorFileSize += lineSize;\n                if (this.currentErrorFileSize >= this.config.maxFileSize) {\n                    this.rotateLogFile(filePath, true);\n                }\n            } else {\n                this.currentFileSize += lineSize;\n                if (this.currentFileSize >= this.config.maxFileSize) {\n                    this.rotateLogFile(filePath, false);\n                }\n            }\n        }\n    }\n    writeToConsole(entry) {\n        if (!this.config.console) return;\n        const colors = {\n            ERROR: '\\x1b[31m',\n            WARN: '\\x1b[33m',\n            INFO: '\\x1b[36m',\n            DEBUG: '\\x1b[37m'\n        };\n        const color = colors[entry.level] || '';\n        const reset = '\\x1b[0m';\n        const message = `${color}${entry.timestamp} [${entry.level}] ${entry.message}${reset}`;\n        switch(entry.level){\n            case 'ERROR':\n                console.error(message, entry.data || '', entry.stack || '');\n                break;\n            case 'WARN':\n                console.warn(message, entry.data || '');\n                break;\n            case 'INFO':\n                console.info(message, entry.data || '');\n                break;\n            case 'DEBUG':\n                console.debug(message, entry.data || '');\n                break;\n        }\n    }\n    log(level, message, data, stack, context) {\n        if (!this.shouldLog(level)) return;\n        const entry = this.formatMessage(level, message, data, stack, context);\n        this.addToMemory(entry);\n        this.writeToConsole(entry);\n        this.writeToFile(entry);\n    }\n    // Métodos públicos\n    debug(message, data, context) {\n        this.log(3, message, data, undefined, context);\n    }\n    info(message, data, context) {\n        this.log(2, message, data, undefined, context);\n    }\n    warn(message, data, context) {\n        this.log(1, message, data, undefined, context);\n    }\n    error(message, error, context) {\n        const stack = error instanceof Error ? error.stack : undefined;\n        this.log(0, message, error, stack, context);\n    }\n    // Métodos específicos para diferentes tipos de operações\n    apiLog(method, url, statusCode, duration, context) {\n        const level = statusCode >= 400 ? 1 : 2;\n        this.log(level, `API ${method} ${url} - ${statusCode} (${duration}ms)`, {\n            method,\n            url,\n            statusCode,\n            duration,\n            type: 'api_request'\n        }, undefined, context);\n    }\n    // Logs de performance\n    performance(operation, duration, data, context) {\n        const level = duration > 5000 ? 1 : 2;\n        this.log(level, `Performance: ${operation} took ${duration}ms`, {\n            operation,\n            duration,\n            type: 'performance',\n            ...data\n        }, undefined, context);\n    }\n    // Logs de segurança\n    security(event, severity, data, context) {\n        const levelMap = {\n            low: 2,\n            medium: 1,\n            high: 0,\n            critical: 0\n        };\n        this.log(levelMap[severity], `Security Event: ${event}`, {\n            event,\n            severity,\n            type: 'security',\n            ...data\n        }, undefined, context);\n    }\n    // Logs de banco de dados\n    database(operation, table, duration, error, context) {\n        if (error) {\n            this.log(0, `Database Error: ${operation} on ${table}`, {\n                operation,\n                table,\n                duration,\n                type: 'database'\n            }, error.stack, context);\n        } else {\n            const level = duration > 1000 ? 1 : 3;\n            this.log(level, `Database: ${operation} on ${table} (${duration}ms)`, {\n                operation,\n                table,\n                duration,\n                type: 'database'\n            }, undefined, context);\n        }\n    }\n    // Logs de autenticação\n    auth(action, userId, success = true, context) {\n        const level = success ? 2 : 1;\n        const message = `Auth ${action}: ${success ? 'SUCCESS' : 'FAILED'}`;\n        this.log(level, message, {\n            action,\n            userId,\n            success,\n            type: 'authentication'\n        }, undefined, context);\n    }\n    // Logs de sistema\n    system(event, data, context) {\n        this.log(2, `System: ${event}`, {\n            event,\n            type: 'system',\n            ...data\n        }, undefined, context);\n    }\n    // Método para criar timer de operações\n    startTimer(operation, context) {\n        const start = Date.now();\n        const requestId = Math.random().toString(36).substring(7);\n        this.debug(`Timer started: ${operation}`, {\n            operation,\n            requestId,\n            type: 'timer_start'\n        }, context);\n        return ()=>{\n            const duration = Date.now() - start;\n            this.performance(operation, duration, {\n                requestId\n            }, context);\n            return duration;\n        };\n    }\n    // Métodos de consulta\n    getLogs(level, limit, type) {\n        let filteredLogs = this.logs;\n        if (level) {\n            filteredLogs = filteredLogs.filter((log)=>log.level === level.toUpperCase());\n        }\n        if (type) {\n            filteredLogs = filteredLogs.filter((log)=>log.data?.type === type);\n        }\n        if (limit) {\n            return filteredLogs.slice(-limit);\n        }\n        return filteredLogs;\n    }\n    getStats() {\n        const stats = {\n            total: this.logs.length,\n            byLevel: {},\n            byType: {},\n            errors: this.logs.filter((log)=>log.level === 'ERROR').length,\n            warnings: this.logs.filter((log)=>log.level === 'WARN').length\n        };\n        this.logs.forEach((log)=>{\n            stats.byLevel[log.level] = (stats.byLevel[log.level] || 0) + 1;\n            if (log.data?.type) {\n                stats.byType[log.data.type] = (stats.byType[log.data.type] || 0) + 1;\n            }\n        });\n        return stats;\n    }\n    clearLogs() {\n        this.logs = [];\n    }\n    // Método para enviar logs para serviços de monitoramento externos\n    async sendToMonitoringService(logs) {\n        const logsToSend = logs || this.logs.filter((log)=>log.level === 'ERROR' || log.level === 'WARN');\n        if (process.env.MONITORING_ENDPOINT && logsToSend.length > 0) {\n            try {\n                const response = await fetch(process.env.MONITORING_ENDPOINT, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization': `Bearer ${process.env.MONITORING_API_KEY}`,\n                        'User-Agent': 'Sistema-Gestao-Logger/1.0'\n                    },\n                    body: JSON.stringify({\n                        service: 'sistema-gestao',\n                        environment: \"development\",\n                        logs: logsToSend\n                    })\n                });\n                if (!response.ok) {\n                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n                }\n                this.debug('Logs sent to monitoring service', {\n                    count: logsToSend.length,\n                    endpoint: process.env.MONITORING_ENDPOINT\n                });\n            } catch (error) {\n                console.error('Failed to send logs to monitoring service:', error);\n            }\n        }\n    }\n    // Método para cleanup de recursos\n    async close() {\n        if (this.fileStream) {\n            this.fileStream.end();\n        }\n        if (this.errorFileStream) {\n            this.errorFileStream.end();\n        }\n    }\n}\n// Instância singleton do logger\nconst logger = new Logger();\n// Função helper para criar contexto de requisição\nfunction createRequestContext(request) {\n    return {\n        ip: request.headers.get('x-forwarded-for') || request.headers.get('x-real-ip') || request.headers.get('cf-connecting-ip') || 'unknown',\n        userAgent: request.headers.get('user-agent') || 'unknown',\n        method: request.method,\n        url: request.url,\n        requestId: request.headers.get('x-request-id') || Math.random().toString(36).substring(7)\n    };\n}\n// Função helper para logs de API\nfunction logApiRequest(request, response, duration, userId) {\n    const context = createRequestContext(request);\n    if (userId) {\n        context.userId = userId;\n    }\n    logger.apiLog(request.method, new URL(request.url).pathname, response.status, duration, context);\n}\n// Middleware para logging automático\nfunction withLogging(fn, operation) {\n    return (...args)=>{\n        const timer = logger.startTimer(operation);\n        try {\n            const result = fn(...args);\n            if (result instanceof Promise) {\n                return result.then((value)=>{\n                    timer();\n                    return value;\n                }).catch((error)=>{\n                    timer();\n                    logger.error(`Error in ${operation}`, error);\n                    throw error;\n                });\n            }\n            timer();\n            return result;\n        } catch (error) {\n            timer();\n            logger.error(`Error in ${operation}`, error);\n            throw error;\n        }\n    };\n}\n// Middleware para APIs Next.js\nfunction withApiLogging(handler, operationName) {\n    return async (...args)=>{\n        const request = args[0];\n        const endTimer = logger.startTimer(`API: ${operationName}`);\n        try {\n            logger.info(`API Request: ${operationName}`, {\n                method: request.method,\n                url: request.url\n            });\n            const result = await handler(...args);\n            endTimer();\n            logger.info(`API Success: ${operationName}`);\n            return result;\n        } catch (error) {\n            endTimer();\n            logger.error(`API Error: ${operationName}`, error);\n            throw error;\n        }\n    };\n}\n// Hook para componentes React\nfunction useLogger() {\n    return {\n        debug: logger.debug.bind(logger),\n        info: logger.info.bind(logger),\n        warn: logger.warn.bind(logger),\n        error: logger.error.bind(logger),\n        startTimer: logger.startTimer.bind(logger)\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/utils/logger.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "./work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "process":
/*!**************************!*\
  !*** external "process" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("process");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "string_decoder":
/*!*********************************!*\
  !*** external "string_decoder" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("string_decoder");

/***/ }),

/***/ "timers":
/*!*************************!*\
  !*** external "timers" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("timers");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/mysql2","vendor-chunks/aws-ssl-profiles","vendor-chunks/iconv-lite","vendor-chunks/long","vendor-chunks/lru-cache","vendor-chunks/denque","vendor-chunks/is-property","vendor-chunks/lru.min","vendor-chunks/sqlstring","vendor-chunks/seq-queue","vendor-chunks/named-placeholders","vendor-chunks/generate-function","vendor-chunks/safer-buffer"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fbackup%2Froute&page=%2Fapi%2Fbackup%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fbackup%2Froute.ts&appDir=C%3A%5CUsers%5CLotuz%5CDesktop%5CNova%20pasta%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CLotuz%5CDesktop%5CNova%20pasta&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();