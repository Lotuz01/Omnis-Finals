version: '3.8'

services:
  # Aplicação para testes
  app-test:
    build:
      context: .
      dockerfile: Dockerfile
      target: test
    container_name: sistema-gestao-test
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=test
      - DATABASE_URL=postgresql://test_user:test_password@postgres-test:5432/test_db
      - REDIS_URL=redis://redis-test:6379
      - JWT_SECRET=test_jwt_secret_key_for_testing_only
      - LOG_LEVEL=debug
      - METRICS_ENABLED=true
      - HEALTH_CHECK_ENABLED=true
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    networks:
      - test-network
    volumes:
      - ./src:/app/src:ro
      - ./tests:/app/tests:ro
    command: npm run test:watch
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Banco de dados para testes
  postgres-test:
    image: postgres:15-alpine
    container_name: postgres-test
    environment:
      POSTGRES_DB: test_db
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5433:5432"
    volumes:
      - postgres-test-data:/var/lib/postgresql/data
      - ./scripts/init-db-test.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d test_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c log_statement=all
      -c log_destination=stderr
      -c logging_collector=off
      -c max_connections=100
      -c shared_buffers=128MB

  # Redis para testes
  redis-test:
    image: redis:7-alpine
    container_name: redis-test
    ports:
      - "6380:6379"
    volumes:
      - redis-test-data:/data
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    command: >
      redis-server
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru

  # Nginx para testes de integração
  nginx-test:
    image: nginx:alpine
    container_name: nginx-test
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx-test.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app-test
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Prometheus para testes de métricas
  prometheus-test:
    image: prom/prometheus:latest
    container_name: prometheus-test
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus-test.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - test-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=1h'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Serviço para executar testes de carga
  load-test:
    build:
      context: .
      dockerfile: Dockerfile.loadtest
    container_name: load-test
    environment:
      - TARGET_URL=http://app-test:3000
      - CONCURRENT_USERS=10
      - TEST_DURATION=60s
      - RAMP_UP_TIME=10s
    depends_on:
      app-test:
        condition: service_healthy
    networks:
      - test-network
    volumes:
      - ./tests/load:/tests:ro
      - load-test-results:/results
    profiles:
      - load-test

  # Serviço para executar testes de segurança
  security-test:
    image: owasp/zap2docker-stable
    container_name: security-test
    environment:
      - ZAP_PROXY=app-test:3000
    depends_on:
      app-test:
        condition: service_healthy
    networks:
      - test-network
    volumes:
      - ./tests/security:/zap/wrk:rw
      - security-test-results:/zap/results:rw
    profiles:
      - security-test
    command: >
      zap-baseline.py
      -t http://app-test:3000
      -J /zap/results/security-report.json
      -r /zap/results/security-report.html

  # Serviço para executar testes end-to-end
  e2e-test:
    build:
      context: .
      dockerfile: Dockerfile.e2e
    container_name: e2e-test
    environment:
      - BASE_URL=http://app-test:3000
      - HEADLESS=true
      - BROWSER=chromium
    depends_on:
      app-test:
        condition: service_healthy
    networks:
      - test-network
    volumes:
      - ./tests/e2e:/tests:ro
      - e2e-test-results:/results
    profiles:
      - e2e-test

  # Serviço para monitorar logs durante os testes
  log-monitor:
    image: grafana/loki:latest
    container_name: log-monitor-test
    ports:
      - "3101:3100"
    volumes:
      - ./monitoring/loki-test.yml:/etc/loki/local-config.yaml:ro
      - loki-test-data:/loki
    networks:
      - test-network
    profiles:
      - monitoring
    command: -config.file=/etc/loki/local-config.yaml

  # Serviço para coletar métricas durante os testes
  metrics-collector:
    image: prom/node-exporter:latest
    container_name: metrics-collector-test
    ports:
      - "9101:9100"
    networks:
      - test-network
    profiles:
      - monitoring
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro

volumes:
  postgres-test-data:
    driver: local
  redis-test-data:
    driver: local
  load-test-results:
    driver: local
  security-test-results:
    driver: local
  e2e-test-results:
    driver: local
  loki-test-data:
    driver: local

networks:
  test-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Profiles para diferentes tipos de teste:
# docker-compose -f docker-compose.test.yml up                    # Testes básicos
# docker-compose -f docker-compose.test.yml --profile load-test up    # Testes de carga
# docker-compose -f docker-compose.test.yml --profile security-test up # Testes de segurança
# docker-compose -f docker-compose.test.yml --profile e2e-test up      # Testes E2E
# docker-compose -f docker-compose.test.yml --profile monitoring up    # Com monitoramento